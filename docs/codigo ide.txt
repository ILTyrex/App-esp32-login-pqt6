#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <Keypad.h>
#include <Wire.h>
#include <LiquidCrystal_PCF8574.h>

LiquidCrystal_PCF8574 lcd(0x27);

// BOTONES
const int BTN1 = 35;  // BLUE
const int BTN2 = 34;  // RED
const int BTN3 = 39;  // GREEN

// SENSOR
const int SENSOR = 23;
bool sensorState = false;
bool lastSensorActivo = false;
int lastSensorState;

// LEDS
const int LED1 = 16; // BLUE
const int LED2 = 17; // RED
const int LED3 = 5; // GREEN
const int LED4 = 22; // YELLOW

// LCD (I2C)
const int LCD1 = 19; //SDA
const int LCD2 = 21; //SCL

// Estados de leds
bool stateLed1 = false;
bool stateLed2 = false;
bool stateLed3 = false;
bool stateLed4 = false;

// Estados anteriores botones
bool lastBtn1 = LOW;
bool lastBtn2 = LOW;
bool lastBtn3 = LOW;

int counter = 0;
int currentMenu = 0; // 0 = menú principal, 1 = LED, 2 = Sensor, 3 = Estado BD
String currentUser = "";  // Nombre del usuario logueado

// Wifi
const char* ssid = "Redmi Note 13"; //Nombre de la red que te vas a conectar
const char* password = "3004400219"; 
const char* baseUrl = "http://10.130.199.140:5000";   //La ip y el puerto de la pc

// TECLADO MATRICIAL
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte rowPins[ROWS] = {13, 12, 14, 27};   // Filas
byte colPins[COLS] = {26, 25, 33, 32};   // Columnas
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// Funciones LCD
void showWelcomeUser() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Bienvenido:");
  lcd.setCursor(0, 1);
  if (currentUser.length() > 0) {
    lcd.print(currentUser);
  } else {
    lcd.print("Usuario N/D"); // Por si no hay nombre aún
  }
}
void showMainMenu() {
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("1-Leds");
  lcd.setCursor(8,0);
  lcd.print("2-Sensor");
  lcd.setCursor(2,1);
  lcd.print("3-Estado BD");
}
// Menus
void showLedMenu() {
  lcd.clear();
  lcd.setCursor(2, 0);
  lcd.print("1-ON");
  lcd.setCursor(9, 0);
  lcd.print("2-OFF");
  lcd.setCursor(3, 1);
  lcd.print("3-Estados");
}
void showSensorMenu() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("1-Estado");
  lcd.setCursor(0, 1);
  lcd.print("2-Conteo");
}
void showEstadoBDMenu() {
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Mostrando ultimos");
  lcd.setCursor(0,1);
  lcd.print("5 estados...");
}
void showLedStates() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("LED1 LED2 LED3");
  lcd.setCursor(0, 1);
  lcd.print(stateLed1 ? " ON" : "OFF");
  lcd.setCursor(5, 1);
  lcd.print(stateLed2 ? " ON" : "OFF");
  lcd.setCursor(10, 1);
  lcd.print(stateLed3 ? " ON" : "OFF");
}

void showSensorStates(){
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("SENSOR");
  lcd.setCursor(12, 0);
  lcd.print("LED4");
  lcd.setCursor(0, 1);
  lcd.print(sensorState ? "Bloqueado" : "Libre");
  lcd.setCursor(12, 1);
  lcd.print(stateLed4 ? " ON" : "OFF");
}
void showCounter(){
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("CONTEO");
  lcd.setCursor(0, 1);
  lcd.print(counter);
  lcd.setCursor(12, 0);
  lcd.print("LED4");
  lcd.setCursor(12, 1);
  lcd.print(stateLed4 ? " ON" : "OFF");
}

// Funciones Wifi y Http
void connectWiFi() {
  WiFi.begin(ssid, password);
  Serial.print("Conectando a WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(250);
    Serial.print(".");
  }
  Serial.println("\nWiFi conectado");
  Serial.print("IP ESP32: ");
  Serial.println(WiFi.localIP());
  Serial.println(WiFi.status());
}
void sendCounter() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    StaticJsonDocument<200> jsonDoc;
    jsonDoc["contador"] = counter;
    String jsonString;
    serializeJson(jsonDoc, jsonString);

    http.begin(String(baseUrl) + "/sendData");
    http.addHeader("Content-Type", "application/json");
    int code = http.POST(jsonString);

    Serial.println(code > 0 ? "Contador enviado" : "Error al enviar contador");
    http.end();
  }
}
void updateLed(int ledNum, bool estado) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    StaticJsonDocument<200> jsonDoc;
    jsonDoc["led"] = ledNum;
    jsonDoc["estado"] = estado ? 1 : 0;
    String jsonString;
    serializeJson(jsonDoc, jsonString);

    http.begin(String(baseUrl) + "/updateLed/" + String(ledNum));
    http.addHeader("Content-Type", "application/json");
    int code = http.PUT(jsonString);

    Serial.println(code > 0 ? "LED actualizado" : "Error al actualizar LED");
    http.end();
  }
}
void getDatos() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(String(baseUrl) + "/getDatos");
    int code = http.GET();

    if (code > 0) {
      String payload = http.getString();
      Serial.println("Respuesta API: " + payload);

      StaticJsonDocument<200> doc;
      if (deserializeJson(doc, payload) == DeserializationError::Ok) {
        stateLed1 = doc["led1"];
        stateLed2 = doc["led2"];
        stateLed3 = doc["led3"];

        digitalWrite(LED1, stateLed1);
        digitalWrite(LED2, stateLed2);
        digitalWrite(LED3, stateLed3);
      }
    }
    http.end();
  }
}

void setup() {
  Serial.begin(115200);
  Serial.println("Starting LCD...");

  Wire.begin(LCD1, LCD2);

  lcd.begin(16, 2);
  lcd.setBacklight(255); 
  
  currentUser = "David";   // ← Aquí luego pondrás el nombre recibido de la app
  showWelcomeUser();
  delay(2000); 
  showMainMenu();

  pinMode(BTN1, INPUT);
  pinMode(BTN2, INPUT);
  pinMode(BTN3, INPUT);
  pinMode(SENSOR, INPUT);

  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);
  pinMode(LED3, OUTPUT);
  pinMode(LED4, OUTPUT);

  digitalWrite(LED1, LOW);
  digitalWrite(LED2, LOW);
  digitalWrite(LED3, LOW);
  digitalWrite(LED4, LOW);

  lastSensorState = digitalRead(SENSOR);

  //connectWiFi();
}

void loop() {
  // LECTURA BOTONES
  bool btn1 = digitalRead(BTN1);
  bool btn2 = digitalRead(BTN2);
  bool btn3 = digitalRead(BTN3);

  char key = keypad.getKey();
  if (currentMenu == 0) {
    if (key) {
      Serial.println(String("Opción seleccionada: ") + key);
      if (key == '1') {
        currentMenu = 1;
        showLedMenu();
        key = '\0';
      } else if (key == '2') {
        currentMenu = 2;
        showSensorMenu();
        key = '\0';
      } else if (key == '3') {
        currentMenu = 3;
        showEstadoBDMenu();
        key = '\0';
      }
    }
  } 
  else {
    // Si estamos dentro de un submenú, presiona * para volver al principal
    if (key == '*') {
      currentMenu = 0;
      showMainMenu();
      key = '\0';
    }
  }

  // Leds
  if (currentMenu == 1) {
    if (key) {
      if (key == '1') { 
        // Encender todos los LEDs
        stateLed1 = stateLed2 = stateLed3 = true;
        digitalWrite(LED1, HIGH);
        digitalWrite(LED2, HIGH);
        digitalWrite(LED3, HIGH);
        Serial.println("LEDs encendidos");
        showLedStates();
        delay(500);
        showLedMenu();
      } 
      else if (key == '2') {
        // Apagar todos los LEDs
        stateLed1 = stateLed2 = stateLed3 = false;
        digitalWrite(LED1, LOW);
        digitalWrite(LED2, LOW);
        digitalWrite(LED3, LOW);
        Serial.println("LEDs apagados");
        showLedStates();
        delay(500);
        showLedMenu();
      } 
      else if (key == '3') {
        // Mostrar estados actuales
        currentMenu = 4;
        showLedStates();
        Serial.println("Mostrando estados de LEDs. Presiona * para volver.");
        key = '\0';
      }
    }
    if (lastBtn1 == LOW && btn1 == HIGH) {
      stateLed1 = !stateLed1;
      digitalWrite(LED1, stateLed1);
      Serial.println("ACK:LED:1:" + String(stateLed1 ? "1" : "0"));
      updateLed(1, stateLed1);
    }
    lastBtn1 = btn1;

    if (lastBtn2 == LOW && btn2 == HIGH) {
      stateLed2 = !stateLed2;
      digitalWrite(LED2, stateLed2);
      Serial.println("ACK:LED:2:" + String(stateLed2 ? "1" : "0"));
      updateLed(2, stateLed2);
    }
    lastBtn2 = btn2;

    if (lastBtn3 == LOW && btn3 == HIGH) {
      stateLed3 = !stateLed3;
      digitalWrite(LED3, stateLed3);
      Serial.println("ACK:LED:3:" + String(stateLed3 ? "1" : "0"));
      updateLed(3, stateLed3);
    }
    lastBtn3 = btn3;
  }

  // Submenú: Estados de LEDs
  if (currentMenu == 4) {
    if (key == '#') {
      currentMenu = 1;
      showLedMenu();
    }
  }

  // SENSOR
  if (currentMenu == 2) {  // Menú Sensor principal
    if (key) {
      if (key == '1') {
        // Mostrar estados del sensor y LED4
        currentMenu = 5;
        showSensorStates();
        Serial.println("Mostrando estado de sensor. Presiona # para volver.");
        key = '\0';
      } 
      else if (key == '2') {
        // Mostrar el conteo actual del sensor
        currentMenu = 6;
        showCounter();
        Serial.println("Mostrando conteo. Presiona # para volver.");
        key = '\0';
      }
    }
  }
  if (currentMenu == 5 || currentMenu == 6){
    int lecturaSensor = digitalRead(SENSOR);
    bool sensorActivo = (lecturaSensor == LOW);
    digitalWrite(LED4, sensorActivo ? HIGH : LOW);
    stateLed4 = sensorActivo;

    if (currentMenu == 5) {
      // Solo mostrar si cambió el estado
      if (sensorActivo != sensorState) {
        sensorState = sensorActivo;
        Serial.println(sensorState ? "SENSOR:1" : "SENSOR:0");
        showSensorStates();
      }
    }
    if (currentMenu == 6) {
      if (sensorActivo && !lastSensorActivo) {
        counter++;
        showCounter();
      }
      if (!sensorActivo && lastSensorActivo) {
        showCounter();
    }
    }
    lastSensorActivo = sensorActivo;
    lastSensorState = lecturaSensor;
    if (key == '#') {
      currentMenu = 2;
      showSensorMenu();
    }
  }
  

  // LECTURA COMANDOS SERIAL
 if (Serial.available()) {
    String cmd = Serial.readStringUntil('\n');
    cmd.trim();

    if (cmd.startsWith("LED:")) {
      int ledNum = cmd.substring(4, 5).toInt();
      int value = cmd.substring(6).toInt();

      if (ledNum == 1) {
        digitalWrite(LED1, value);
        stateLed1 = value;
        Serial.println("ACK:LED:1:" + String(value));
        updateLed(1, value);   

      } else if (ledNum == 2) {
        digitalWrite(LED2, value);
        stateLed2 = value;
        Serial.println("ACK:LED:2:" + String(value));
        updateLed(2, value); 

      } else if (ledNum == 3) {
        digitalWrite(LED3, value);
        stateLed3 = value;
        Serial.println("ACK:LED:3:" + String(value));
        updateLed(3, value);
      }
    }
    else if (cmd == "RESET") {
      counter = 0;
      Serial.println("ACK:RESET");
      lcd.setCursor(0, 1);
      lcd.print("RESET");
      delay(500);
      lcd.setCursor(0, 1);
      lcd.print("     ");
      sendCounter();
    }
  }

  static unsigned long lastGet = 0;
  if (millis() - lastGet > 10000) {
    getDatos(); 
    lastGet = millis();
  }

  delay(50);
}